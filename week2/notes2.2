As we learnt this week interpolating rotations requires some care and thought.  As specified in this problem we will consider the orientation in terms of roll-pitch-yaw angles and interpolate those.  We also need to interpolate position, so we can consider every camera pose as a 6-vector comprising: x position, y position, z position, roll angle, pitch angle and yaw angle.
    
    The first step then is to convert all three poses we have been given into this format.  The Toolbox function transl extracts the translational part of a homogeneous matrix as a column vector and the Toolbox function tr2rpy extracts the roll-pitch-yaw angles of the homogeneous matrix as a row vector.  We want to create a row vector for each pose, therefore we need to transpose the output of the transl function.
    
  V0 = [ transl(C0)'  tr2rpy(C0) ];
  Vf = [ transl(Cf)'  tr2rpy(Cf) ];
  Vi = [ transl(Ci)'   tr2rpy(Ci) ];

    Now we use the Toolbox function mstraj which generates a smooth path through points defined in an N-dimensional space, in this case N=6.  The arguments to mstraj are: a matrix of points to visit, one per row, so in this case it is the via point Vi and then the final point Vf; the velocity limits for the segments which in this case are not specified so we write []; the time limits for the segments which in this case are 6 and 8 respectively; the initial point which is V0; the time in seconds between the samples which is 1/5 since the sample rate is 5Hz; and finally the acceleration time which was specified as 1.5 seconds.
    
	TRAJ = mstraj([Vi; Vf], [], [6 8], V0, 1/5, 1.5)

Now the 50th point on the trajectory is simply the 50th row of the matrix TRAJ

    P50 = TRAJ(50,:);
    
and remember that this is a 6-vector of position and roll-pitch-yaw angles.  We were asked to give the pose as an SE(3) homogeneous transformation matrix so we need to do the conversion
    
	C50 = transl( P50(1:3) ) * rpy2tr( P50(4:6) );
