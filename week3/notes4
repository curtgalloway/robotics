The first step is to use the pre-existing model of a Puma 560 robot
        
		mdl_puma560

To which we need to attach a base and tool transform.  Base transform first.   If the robot's x-axis points in the factory y-direction then there must be a rotation of 90deg about the z-axis, so the base transform is
        
        base = transl(17.4, 12.2, 1.3) * trotz(90, 'deg')
        
and note that we use the function trotz not rotz because we need to have an SE(3) homogeneous rotation matrix.
        
Next the tool transform, which is a bit simpler
        
        tool = transl( [4.1, 0.3, 17.4] * 0.01 )
        
and remember that the dimensions were given in units of centimetres.
        
Now we can attach these to the robot
        
        p560.base = base;
        p560.tool = tool;
        
The next part of the problem requires us to compute a joint angle trajectory for configuration q1 to q2 in 120 time steps which is simple to do
        
        qt = jtraj(q1, q2, 120);
        
The configuration at time step 70 is simply the 70'th row of this matrix, and the elements of the row are the joint angles
        
        q = qt(70,:);
        
Now we need to compute the forward kinematics for this joint configuration
        
        T = p560.fkine(q * pi/180);

but note that the joint angles have been computed in degrees so we must first convert them to radians before passing them to the fkine method.
        
The positional part of this homogeneous transformation is obtained by the Toolbox function transl
        
        P70 = transl(T)'
        
note that we have transposed the result since transl returns a column vector (3x1) whereas the problem required a row (1x3) vector.

